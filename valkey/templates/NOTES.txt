{{- if eq .Values.architecture "cluster" -}}
    {{- if lt (int .Values.nodeCount) 3 -}}
        {{- printf "Expected value of `nodeCount` to be at least 3, current value: %d" (int .Values.nodeCount) | fail -}}
    {{- end -}}
{{- else if eq .Values.architecture "sentinel" -}}
    {{- if lt (int .Values.sentinel.nodeCount) 3 -}}
        {{- printf "Expected value of `sentinel.nodeCount` to be at least 3, current value: %d" (int .Values.sentinel.nodeCount) | fail -}}
    {{- end -}}
{{- else if ne .Values.architecture "standalone" -}}
    {{- printf "Unsupported value for `architecture`: %s" .Values.architecture | fail -}}
{{- end -}}

{{- $kubectl := "kubectl" -}}
{{- if ne .Release.Namespace "default" -}}
{{- $kubectl = printf "%s --namespace %s" $kubectl .Release.Namespace -}}
{{- end -}}

Please wait a few moments for {{ .Chart.Name }} to be deployed to your cluster.

You can access {{ .Chart.Name }} on the following address within the Kubernetes cluster:

    {{ include "fullName" (dict "suffix" "headless" "context" .) }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}

{{- if and .Values.service.enabled (has .Values.service.type (list "ClusterIP" "LoadBalancer" "NodePort")) }}
{{- $serviceName := (include "fullName" .) }}
{{- $servicePort := coalesce .Values.service.ports.valkey .Values.containerPorts.valkey }}

To access {{ .Chart.Name }} from outside of the Kubernetes cluster, execute the following commands to obtain a service endpoint to connect to:

{{- if eq .Values.service.type "ClusterIP" }}

    {{ $kubectl }} port-forward svc/{{ $serviceName }} {{ $servicePort }}:{{ $servicePort }} &
    echo "localhost:{{ coalesce .Values.service.ports.valkey .Values.containerPorts.valkey }}"

{{- else if eq .Values.service.type "LoadBalancer" }}

    SERVICE_IP="$({{ $kubectl }} get svc {{ $serviceName }} --template "{{ "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}" }}")"
    echo "$SERVICE_IP:{{ $servicePort }}"

{{- else if eq .Values.service.type "NodePort" }}

    NODE_IP="$({{ $kubectl }} get node -o jsonpath="{.items[0].status.addresses[0].address}")"
    NODE_PORT="$({{ $kubectl }} get svc {{ $serviceName }} -o jsonpath="{.spec.ports[0].nodePort}")"
    echo "$NODE_IP:$NODE_PORT"

{{- end }}
{{- end }}

{{- if (eq (include "auth.enabled" .) "true") }}

To obtain the {{ .Chart.Name }} password, execute the following command:

    kubectl get secret --namespace {{ .Release.Namespace }} {{ coalesce .Values.auth.existingSecret (include "fullName" .) }} -o jsonpath="{.data.{{ include "auth.passwordKey" . }}}" | base64 -d

{{- end }}
